Sample report
=============

General Information
-------------------
This sample has the code "`{{sample_short_name}}`" and is named "{{sample_long_name}}". It is part of the project code "`{{project_short_name}}`" which is described as "{{project_long_name}}" and contains {{project_other_samples}} other samples.

Meta-data details
-----------------
All the meta-data associated with this sample is displayed below:

{{all_metadata}}

-------

Processing
----------
* This report and all the analysis was generated using the `{{project_name}}` python pipeline.

* Documentation and source code is available at:

<{{project_url}}>

* Version `{{project_version}}` of the pipeline was used.

* This document was generated at `{{now}}` on host `{{hostname}}`.

{{#git}}
* The exact git hash of the latest commit was: `{{git_hash}}`
{{/git}}


Validation
----------
The original reads file weighed {{fastq_size}} and was validated using the \url{https://github.com/statgen/fastQValidator} program. It contained no invalid characters.


Quality
-------
The original reads file contained {{fastq_count}} reads with an average PHRED quality of {{fastq_qual}}. The average quality per base and the average quality per sequence can be seen in figure \ref{fastqc_graphs}.

{{fastqc_graphs}}


Lengths
-------
The shortest sequence in the file was {{shortest_seq}} base pairs long, while the longest measured {{longest_seq}} base pairs. The complete sequence length distribution of the original reads file can be seen in figure \ref{raw_len_dist}.

{{raw_len_dist}}


Filtering
---------
{{#filtering}}
Next, we filter the sequences based on several criteria. These many sequences are lost at each step:

* Checking for the presence of both primers within at least {{primer_max_dist}} base pairs of the read's start or end and with at most {{mismatches_allowed}} mismatches allowed discards {{primer_discard}} sequences ({{primer_left}} left).

* Checking for the absence of undetermined "N" bases anywhere in the reads discards {{n_base_discard}} sequences ({{n_base_left}} left).

* Checking that no sequence is shorter than {{min_read_length}} base pairs and no sequence is longer than {{max_read_length}} base pairs discards {{length_discard}} sequences ({{length_left}} left).

* Checking that no sequence has a quality score below {{phred_threshold}} within a rolling average window of {{phred_window_size}} base pairs discards {{score_discard}} sequences ({{score_left}} left).

This leaves us with {{percent_remaining}} of this sample's original sequences.
{{/filtering}}

{{^filtering}}
The filtering on this sample has not been performed yet. Please run the pipeline and regenerate this report.
{{/filtering}}
-------

Gene Presence with Barrnap
--------------------------

{{#barrnap}}
In this step, we run every sequence through the `barrnap` algorithm to detect the presence of any type of rRNA gene (via `nhmmer`). We then keep only raw sequences that had a positive hit for both the 16S gene and the 23S gene.

* Checking for the presence of rRNA genes further discards {{barrnap_discard}} sequences ({{barrnap_left}} left).
{{/barrnap}}

{{^barrnap}}
The barrnap algorithm has not been run on this sample yet. Please run the pipeline and regenerate this report.
{{/barrnap}}
-------

Chimera Detection
-----------------

{{#chimeras}}
In this step, we run every sequence through the `vsearch --uchime3_denovo` algorithm to detect the presence of any chimeras.

* Checking for chimeras discards {{chimeras_discard}} sequences ({{chimeras_left}} left).
{{/chimeras}}

{{^chimeras}}
    The chimeras detection algorithm has not been run on this sample yet. Please run the pipeline and regenerate this report.
{{/chimeras}}
-------

Clustering
----------
Further analysis is usually performed not at the single sample level but on a collection of samples at the same time (samples are concatenated within a project). The next steps are found in the Project report PDF and not the Sample report PDF.